Param(
	[Parameter(Mandatory=$true)]
	[string] $InputDirectory,
    [Parameter(Mandatory=$false)]
    [string] $OutputDirectory = $InputDirectory,
	[Parameter(Mandatory=$false)]
    [string] $Version = ""
)

$ErrorActionPreference = "Stop"

function Create-VersionFromDate() {
	$_version = $([System.DateTime]::Now.ToString("yyyy.MM.dd.hhmm"))
	return $_version
}

function Create-NuSpecFile([string] $Path, 
						   [string] $Name, 
						   [string] $Version, 
						   [string] $Authors = "Horizontal Integration") {
	$xmlPath = "$Path\$Name.nuspec"
	$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath,$Null)
	$xmlWriter.Formatting = 'Indented'
	$xmlWriter.Indentation = 1
	$xmlWriter.IndentChar = "`t"
	$xmlWriter.WriteStartDocument()

	#create package nodde
	$xmlWriter.WriteStartElement("package","http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd")
	
	#create metadata node
	$xmlWriter.WriteStartElement("metadata");

	#write the required nuspec fields
	$xmlWriter.WriteElementString("id", $Name);
	$xmlWriter.WriteElementString("version", $Version);
	$xmlWriter.WriteElementString("authors", $Authors);
	$xmlWriter.WriteElementString("description", "Package that contains the $Name.update file generated by TDS for Sitecore.");

	#close the metadata and package nodes
	$xmlWriter.WriteEndElement();
	$xmlWriter.WriteEndElement();

	#write to file
	$xmlWriter.Close();
}

if([string]::IsNullOrEmpty($Version)) {
	Write-Host "No version parameter provided. Generating version from current date..."
	$Version = Create-VersionFromDate
}

Write-Host "Input Directory: $InputDirectory"
Write-Host "Output Directory: $OutputDirectory"
Write-Host "Version: $Version"

$updatePackages = Get-ChildItem $InputDirectory -Filter "*.update"
Write-Host "Creating $($updatePackages.Count) NuGet packages from  update files."

$_PowerShellVersion = ($PSVersionTable).PSVersion.Major

#PowerShell 4 or below does not have a 'native' way of compressing zip files.
#Need to use .NET methods
if($_PowerShellVersion -lt 5) {
	Add-Type -assembly "system.io.compression.filesystem"
}

foreach($item in $updatePackages) {
	Write-Host "Creating NuGet package for $($item.Name)..."
	$PackageName = $item.Name -replace ".update", ""	

	#Create a nuspec file for each package
	Create-NuSpecFile -Path $InputDirectory -Name $PackageName -Version $Version

	#need to create an array of files, needs to be exact (there was a bug where it was including other similarly named things)
	$_Files = @(Get-ChildItem $InputDirectory -Filter "$PackageName.update")
	$_Files += @(Get-ChildItem $InputDirectory -Filter "$PackageName.nuspec")

	

	if($_PowerShellVersion -ge 5) {
		#Compress update file and nuspec into a zip file (only supports zip)
		$_Files | Compress-Archive -DestinationPath "$OutputDirectory\$PackageName.zip"

		#rename zip file to a nupkg file. Compress-Archive needs to have a .zip file extension.
		Get-ChildItem $OutputDirectory -Filter "$PackageName.zip" | Rename-Item -NewName "$PackageName.$Version.nupkg"
	}
	
	#PowerShell 4 fallback
	else {
		#Create Directory for each update and nuspec because we aren't using PowerShell 5 and we have to use legacy methods to zip up files
		$_zipDir = "$InputDirectory\$PackageName"
		New-Item -Path $_zipDir -ItemType Directory -Force

		#in case the directory doesn't get cleaned (if it existed), clean it out recursively
		Get-ChildItem -Path $_zipDir -Force | Remove-Item -Recurse -Force

		#move update and nuspec to new folder and zip it up
		$_Files | Move-Item -Destination $_zipDir -Force -Verbose
		[io.compression.zipfile]::CreateFromDirectory($_zipDir, "$OutputDirectory\$PackageName.$Version.nupkg")
	}
}
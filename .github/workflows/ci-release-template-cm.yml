name: CM Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
      SCSPackageName:
        required: true
        type: string
      nuget_version:
        required: true
        type: string
      PackageName:
        required: true
        type: string
      webapp-name:
        required: true
        type: string
      webapp-type:
        required: true
        type: string
      resource-group-name:
        required: true
        type: string
      cm-url:
        required: true
        type: string
      identity-url:
        required: true
        type: string
      sitecore-clientID:
        required: true
        type: string
      sitecore-clientSecret:
        required: true
        type: string
      ClientName:
        required: true
        type: string

permissions:
      id-token: write
      contents: read

jobs:
  cm-job:
    name: CM Deployment
    runs-on: windows-latest
    environment: ${{ inputs.environment }}
    steps:
    - uses: actions/checkout@v3
    - name: Download Artifacts
      # id: retrieve-version
      uses: ./.github/actions/Download-Artifacts/
      with:
        nuget_version: ${{ inputs.nuget_version }}
        SCSPackageName: ${{ inputs.SCSPackageName }}
        PackageName: ${{ inputs.PackageName }}
    # - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
    #   uses: azure/login@v1
    #   with:
    #     client-id: "3f816198-befe-4e29-a575-37837f90bf60"
    #     tenant-id: "4c31935f-277d-4f84-bc78-b2d637b109d9"
    #     subscription-id: "7fb1a0c1-ea2c-4d6e-aab1-a7e96e350865"
    #     enable-AzPSSession: true
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"3f816198-befe-4e29-a575-37837f90bf60","clientSecret":"HG68Q~qYkDPzYE40W9GXnGoqu_qErZsCLqY.cbbk","subscriptionId":"7fb1a0c1-ea2c-4d6e-aab1-a7e96e350865","tenantId":"4c31935f-277d-4f84-bc78-b2d637b109d9"}'
        enable-AzPSSession: true
    - name: 'Stop CM WebAPP'
      uses: azure/powershell@v1
      with:
        inlineScript: Stop-AzWebApp -ResourceGroupName ${{ inputs.resource-group-name }} -Name ${{ inputs.webapp-name }}
        azPSVersion: "latest"
    - uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: '["**/*.config"]'
      env:
        ClientName: ${{ inputs.ClientName }}

    - uses: azure/webapps-deploy@v2
      name: Deploy Web Package to Web App
      with:
          app-name: ${{ inputs.webapp-name }} # Replace with your app name
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }} # Define secret variable in repository settings as per action documentation
          package: '${{ github.workspace }}\${{ inputs.PackageName }}.${{ inputs.nuget_version }}'

    - name: xdt transformation
      shell: pwsh
      working-directory: ${{ github.workspace }}
      run: |
        $webAppType = ${{ inputs.webapp-type }}
        $resourceGroupName = ${{ inputs.resource-group-name }}
        $webAppName = ${{ inputs.webapp-name }}

        Write-Host "ResourceGroupName: $resourceGroupName - WebAppName: $webAppName" 

        $commandBody = @{
            command = "powershell -command `"Import-Module D:\home\Scripts\Update-XmlDocTransform.psm1; Update-XmlDocTransform -xml D:\home\site\wwwroot\web.config -xdt D:\home\site\wwwroot\web.config-Global.xdt  Remove-Item D:\home\site\wwwroot\web.config-Global.xdt`"" 
        }

        function Get-AzureRmWebAppPublishingCredentials($resourceGroupName, $webAppName, $slotName = $null){
            if ([string]::IsNullOrWhiteSpace($slotName)){
                $resourceType = "Microsoft.Web/sites/config"
                $resourceName = "$webAppName/publishingcredentials"
            }
            else{
                $resourceType = "Microsoft.Web/sites/slots/config"
                $resourceName = "$webAppName/$slotName/publishingcredentials"
            }
            $publishingCredentials = Invoke-AzResourceAction -ResourceGroupName $resourceGroupName -ResourceType $resourceType -ResourceName $resourceName -Action list -ApiVersion 2015-08-01 -Force
            return $publishingCredentials
        } 

        function Get-KuduApiAuthorizationHeaderValue($resourceGroupName, $webAppName, $slotName = $null){
            $publishingCredentials = Get-AzureRmWebAppPublishingCredentials $resourceGroupName $webAppName $slotName
            return ("Basic {0}" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $publishingCredentials.Properties.PublishingUserName, $publishingCredentials.Properties.PublishingPassword))))
        } 

        function Configure-EnvironmentWebConfig($resourceGroupName, $webAppName, $slotName = "", $webAppType){
            Write-Output "Configuring Web.config for: $webAppType"

            $kuduApiAuthorizationToken = Get-KuduApiAuthorizationHeaderValue $resourceGroupName $webAppName $slotName

            if ([string]::IsNullOrWhiteSpace($slotName)){
                $kuduApiUrl = "https://$webAppName.scm.azurewebsites.net/api/command"
            }
            else{
                $kuduApiUrl = "https://$webAppName`-$slotName.scm.azurewebsites.net/api/command"
            }

            Invoke-RestMethod -Uri $kuduApiUrl `
                                -Headers @{"Authorization"=$kuduApiAuthorizationToken;"If-Match"="*"} `
                                -Method POST `
                                -ContentType "application/json" `
                                -Body (ConvertTo-Json $commandBody)
                                #| Out-Null
        }
        Configure-EnvironmentWebConfig -resourceGroupName $resourceGroupName -webAppName $webAppName -slotName "" -webAppType $webAppType

    - name: 'Start CM WebAPP'
      uses: azure/powershell@v1
      with:
        inlineScript: Start-AzWebApp -ResourceGroupName ${{ inputs.resource-group-name }} -Name ${{ inputs.webapp-name }}
        azPSVersion: "latest"
   
    - name: 'Perform Health Check of CM'
      working-directory: ${{ github.workspace }}\deploy\Sitecore.Deployment\build\scripts
      run: |
        .\healthCheck.ps1 -http_RequestUrl '${{ inputs.cm-url }}/sitecore/service/keepalive.aspx' -http_RequestRetries 100 -http_RequestTimeout 1000 -http_RetrySeconds 30
      shell: pwsh
   
    - name: list dir
      run: dir ${{ github.workspace }}
      shell: pwsh
   
    - name: Install Item Package
      shell: pwsh
      working-directory: ${{ github.workspace }}
      run: |

        #Install sitecore.cli on agent
        dotnet new tool-manifest
        dotnet nuget add source -n Sitecore https://sitecore.myget.org/F/sc-packages/api/v3/index.json
        dotnet tool install Sitecore.CLI --version 5.1.25

        dotnet sitecore --version

        #Sitecore login
        dotnet sitecore login --client-id ${{ inputs.sitecore-clientID }} --client-secret ${{ inputs.sitecore-clientSecret }} --cm ${{ inputs.cm-url }} --authority ${{ inputs.identity-url }} --allow-write true --client-credentials true

        #Install Sitecore Serialization Packages (.itempackages)
        dotnet sitecore ser pkg install -f ${{ inputs.SCSPackageName }} --verbose

        #Push Role Serialization Packages to Sitecore instance
        #Write-Host "Initiating Role Serialization sync"
        #dotnet sitecore ser push
  
    - name: 'Perform Health Check of CM'
      working-directory: ${{ github.workspace }}\deploy\Sitecore.Deployment\build\scripts
      run: |
        .\healthCheck.ps1 -http_RequestUrl '${{ inputs.cm-url }}/sitecore/service/keepalive.aspx' -http_RequestRetries 100 -http_RequestTimeout 1000 -http_RetrySeconds 30
      shell: pwsh

    